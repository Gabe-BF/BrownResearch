package jack.auctions;

import java.util.Map;
import java.util.HashMap;

import jack.server.*;

public class PennyAuction extends Auction
{
    /* Message types used by this auction */
    private static final String START_MSG = "start";
    private static final String STATUS_MSG = "status";
    private static final String STOP_MSG = "stop";
    private static final String BID_MSG = "bid";

    /* Argument keys used in messages */
    private static final String TIMER_KEY = "timer";
    private static final String BIDDER_KEY = "bidder";
    private static final String BID_KEY = "bid";

    /* The maximum amount of time given to bidders after a new bid (ms) */
    private final long TIMEOUT = 15000;
    
    /* Initial auction length */
    private final long TIME = 50000;

    /* Time cap */
    private final long CAP = 10000;
    
    /* The value a bid (dollars represent cents (so that I don't have to float -> int everything :/  */
    private final int BID = 1;
    
    /* The name of the highest bidder */
    private String highBidder = null;

    /* The value of the highest bid */
    private int highBid = 0;

    /* The time that this auction should end */
    private long endTime = 0;

    public PennyAuction(int auctionId) {
        super(auctionId);
        putHandler(BID_MSG, new BidHandler());
    }

    @Override
    protected void initialize() {
        sendStart();
    }

    @Override
    protected void resolve() {
        sendStop();
    }

    @Override
    protected void idle() {
        if (System.currentTimeMillis() > endTime) {
            tryEndable();
        }
    }

    private void sendStart() {
        endTime = System.currentTimeMillis() + TIME;
        long seconds = TIMEOUT / 1000;
        Map<String, String> args = new HashMap<String, String>();
        args.put(TIMER_KEY, Long.toString(seconds));
        sendMessage(START_MSG, args);
    }

    private void sendStatus() {
        long seconds = (endTime - System.currentTimeMillis()) / 1000;
        Map<String, String> args = new HashMap<String, String>();
        args.put(TIMER_KEY, Long.toString(seconds));
        if (highBidder != null) {
            args.put(BIDDER_KEY, highBidder);
            args.put(BID_KEY, Integer.toString(highBid));
        }
        sendMessage(STATUS_MSG, args);
    }

    private void sendStop() {
        Map<String, String> args = new HashMap<String, String>();
        if (highBidder != null) {
            args.put(BIDDER_KEY, highBidder);
            args.put(BID_KEY, Integer.toString(highBid));
        }
        sendMessage(STOP_MSG, args);
    }

    private class BidHandler implements MessageHandler {
        public void handle(Map<String, String> args)
                throws IllegalArgumentException {

            // Verify this message contains the correct keys

            if (!args.containsKey(BIDDER_KEY)) {
                throw new IllegalArgumentException("Invalid message: no "
                                                       + BIDDER_KEY);
            }

            if (!args.containsKey(BID_KEY)) {
                throw new IllegalArgumentException("Invalid message: no "
                                                       + BID_KEY);
            }

            // Check for a legitimate bid
            int bid = Integer.parseInt(args.get(BID_KEY));
            if (BID == bid) {
                highBidder = args.get(BIDDER_KEY);
                highBid += BID;

                // Increase the length of the auction
                // while enforcing the time cap
                long currTime = System.currentTimeMillis();
                if (endTime <= CAP)
                  endTime = CAP;
                else
                  endTime = currTime + TIMEOUT;

                // Update the clients
                sendStatus();
            }
        }
    }
}
